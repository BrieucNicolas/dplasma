extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

#if defined(HAVE_CUDA)
#include <dague/devices/cuda/dev_cuda.h>
#include "dplasma/cores/cuda_zgemm.h"
#endif  /* defined(HAVE_CUDA) */

%}

uplo      [type = "PLASMA_enum"]
alpha     [type = "dague_complex64_t" hidden = on default="(dague_complex64_t)1.0" ]
beta      [type = "dague_complex64_t" hidden = on default="(dague_complex64_t)0.0" ]

dataA     [type = "dague_ddesc_t *"]
descA     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
dataB     [type = "dague_ddesc_t *"]
descB     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataB)"]
dataC     [type = "dague_ddesc_t *"]
descC     [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataC)"]


DAGUE_IN_A(m, n)
  /* Execution Space */
  m = 0 .. (descA.nt-1)
  n = m .. (descA.nt-1)

  /* Locality */
  : dataA(m,n)

  RW    A    <- dataA(m,n)
             -> ((n>=(1+m)) & (m>=1)) ? C potrf_zgemm(0, n, m)
             -> ((0==m) & (n>=1)) ? B potrf_ztrsm(0, n)
             -> ((n==m) & (n>=1)) ? B potrf_zherk(0, n)
             -> ((0==m) & (0==n)) ? A potrf_zpotrf(0)

BODY
{
    /* nothing */
}
END

potrf_zpotrf(k)
  /* Execution Space */
  k = 0..(descA.nt-1)

  /* Locality */
  : dataA(k,k)

  RW    A    <- ((k>=1)) ? B potrf_zherk(k-1, k)
             <- ((0==k)) ? A DAGUE_IN_A(0, 0)
             -> ((k>=1)) ? A trtri_ztrsmR(k, 0..(k-1))
             -> ((descA.nt>=(k+2))) ? A trtri_ztrsmL(k, (k+1)..(descA.nt-1))
             -> A trtri_ztrtri(k)
             -> ((descA.nt>=(k+2))) ? A potrf_ztrsm(k, (k+1)..(descA.nt-1))

BODY
{
  int tempkm = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );
  int info = 0;

  printlog("CORE_zpotrf(%d)\n"
           "\t(PlasmaUpper, tempkm, A(%d,%d)[%p], ldak, descA.nb*k)\n",
  k, k, k, A);
#if !defined(DAGUE_DRY_RUN)

  CORE_zpotrf(PlasmaUpper, tempkm, A /* dataA(k,k) */,
              ldak, &info );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

potrf_ztrsm(k, m)
  /* Execution Space */
  k = 0..(descA.nt-2)
  m = (k+1)..(descA.nt-1)

  /* Locality */
  : dataA(k,m)

  READ  A    <- A potrf_zpotrf(k)
  RW    B    <- ((k>=1)) ? C potrf_zgemm(k-1, m, k)
             <- ((0==k)) ? A DAGUE_IN_A(0, m)
             -> ((m>=(k+2))) ? B potrf_zgemm(k, m, (k+1)..(m-1))
             -> B trtri_ztrsmL(k, m)
             -> ((descA.nt>=(m+2))) ? A potrf_zgemm(k, (m+1)..(descA.nt-1), m)
             -> A potrf_zherk(k, m)

BODY
{
  int tempmm = ((m)==(descA.nt-1)) ? (descA.n-(m*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_ztrsm(%d, %d)\n"
           "\t(PlasmaLeft, PlasmaUpper, PlasmaConjTrans, PlasmaNonUnit, descA.nb, tempmm, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
  k, m, k, k, A, k, m, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_ztrsm(PlasmaLeft, PlasmaUpper, PlasmaConjTrans,
        PlasmaNonUnit, descA.nb, tempmm,
        1.000000, A /* dataA(k,k) */, ldak,
        B /* dataA(k,m) */, ldak );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

potrf_zherk(k, m)
  /* Execution Space */
  k = 0..(descA.nt-2)
  m = (k+1)..(descA.nt-1)

  /* Locality */
  : dataA(m,m)

  CTL   ctl0 -> ctl0 trtri_ztrsmL(k, m)
  READ  A    <- B potrf_ztrsm(k, m)
  RW    B    <- ((k>=1)) ? B potrf_zherk(k-1, m)
             <- ((0==k)) ? A DAGUE_IN_A(m, m)
             -> ((m>=(k+2))) ? B potrf_zherk(k+1, m)
             -> (((1+k)==m)) ? A potrf_zpotrf(m)

BODY
{
  int tempmm = ((m)==(descA.nt-1)) ? (descA.n-(m*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );

  printlog("CORE_zherk(%d, %d)\n"
           "\t(PlasmaUpper, PlasmaConjTrans, tempmm, descA.mb, -1.000000, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
  k, m, k, m, A, m, m, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_zherk(PlasmaUpper, PlasmaConjTrans, tempmm,
        descA.mb, -1.000000, A /* dataA(k,m) */,
        ldak, 1.000000, B /* dataA(m,m) */,
        ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

potrf_zgemm(k, m, n)
  /* Execution Space */
  k = 0..(descA.nt-2)
  m = (k+2)..(descA.nt-1)
  n = (k+1)..(m-1)

  /* Locality */
  : dataA(n,m)

  CTL   ctl2 -> ctl2 trtri_ztrsmL(k, m)
  CTL   ctl1 -> ctl1 trtri_ztrsmL(k, n)
  READ  A    <- B potrf_ztrsm(k, n)
  READ  B    <- B potrf_ztrsm(k, m)
  RW    C    <- ((k>=1)) ? C potrf_zgemm(k-1, m, n)
             <- ((0==k)) ? A DAGUE_IN_A(n, m)
             -> (((1+k)==n)) ? B potrf_ztrsm(n, m)
             -> ((n>=(2+k))) ? C potrf_zgemm(k+1, m, n)

/*********************
BODY [type=CUDA dyld=cublasZgemm]
        int ldak = BLKLDD( descA, k );
        int tempmm = (m==(descA.nt-1)) ? (descA.n-(m*descA.nb)) : descA.nb;

        return gpu_zgemm(context, this_task,
                         ( n == k+1 ),
                         PlasmaConjTrans, PlasmaNoTrans,
                         descA.mb, tempmm, descA.mb,
                         (dague_complex64_t)-1.0, k, n, &descA, ldak,
                                                  k, m, &descA, ldak,
                         (dague_complex64_t) 1.0, n, m, &descA, descA.mb);
END
*********************/

BODY
{
  int tempmm = (m==(descA.nt-1)) ? (descA.n-(m*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_zgemm(%d, %d, %d)\n"
           "\t(PlasmaConjTrans, PlasmaNoTrans, descA.mb, tempmm, descA.mb, -1, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], descA.mb)\n",
  k, m, n, k, n, A, k, m, B, n, m, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zgemm(PlasmaConjTrans, PlasmaNoTrans,
             descA.mb, tempmm, descA.mb, 
             -1.0, A /* dataA(k,n) */, ldak,
                   B /* dataA(k,m) */, ldak,
              1.0, C /* dataA(n,m) */, descA.mb );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

trtri_ztrsmL(k, n)
  /* Execution Space */
  k = 0..(descA.nt-2)
  n = (k+1)..(descA.nt-1)

  /* Locality */
  : dataA(k,n)

  CTL   ctl3 -> ((0==k)) ? ctl3 trtri_ztrtri(0)
  READ  A    <- A potrf_zpotrf(k)
  RW    B    <- B potrf_ztrsm(k, n)
             -> (((1+k)==n)) ? B trtri_ztrsmR(n, n-1)
             -> ((k>=1)) ? B trtri_zgemm(k, 0..(k-1), n)
             -> ((n>=(2+k))) ? C trtri_zgemm(k+1, k, n)
             -> (((k+1)==n) & (descA.nt>=(k+3))) ? A trtri_zgemm(n, n-1, (n+1)..(descA.nt-1))
  CTL   ctl2 <- ((n>=(2+k))) ? ctl2 potrf_zgemm(k, n, (k+1)..(n-1))
  CTL   ctl1 <- ((descA.nt>=(2+n))) ? ctl1 potrf_zgemm(k, (n+1)..(descA.nt-1), n)
  CTL   ctl0 <- ctl0 potrf_zherk(k, n)

BODY
{
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_ztrsmL(%d, %d)\n"
           "\t(PlasmaLeft, uplo, PlasmaNoTrans, PlasmaNonUnit, tempkm, tempnn, -1, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
  k, n, k, k, A, k, n, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_ztrsm(PlasmaLeft, uplo, PlasmaNoTrans,
        PlasmaNonUnit, tempkm, tempnn,
        -1, A /* dataA(k,k) */, ldak,
        B /* dataA(k,n) */, ldak );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

trtri_zgemm(k, m, n)
  /* Execution Space */
  k = (1)..(descA.nt-2)
  m = 0..(k-1)
  n = (k+1)..(descA.nt-1)

  /* Locality */
  : dataA(m,n)

  READ  A    <- ((k>=(2+m))) ? C trtri_zgemm(k-1, m, k)
             <- (((1+m)==k)) ? B trtri_ztrsmL(m+1-1, m+1)
  READ  B    <- B trtri_ztrsmL(k, n)
  RW    C    <- ((k>=(m+2))) ? C trtri_zgemm(k-1, m, n)
             <- ((k==(m+1))) ? B trtri_ztrsmL(m, n)

             -> (((1+k)==n)) ? B trtri_ztrsmR(n, m)
             -> ((n>=(k+2))) ? C trtri_zgemm(k+1, m, n)
             -> (((1+k)==n) & (descA.nt>=(k+3))) ? A trtri_zgemm(n, m, (n+1)..(descA.nt-1))

  CTL   ctl6 -> (((1+k)==n)) ? ctl6 trtri_ztrsmR(n, n-1)
  CTL   ctl5 -> ((n>=(k+2))) ? ctl5 trtri_zgemm((k+1)..(n-1), k, n)
             <- ((m>=1)) ? ctl5 trtri_zgemm(m, 0..(m-1), n)
  CTL   ctl4 -> ctl4 trtri_ztrsmR(k, m)

/*********************
BODY [type=CUDA dyld=cublasZgemm]
        int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
        int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
        int ldam = BLKLDD( descA, m );
        int ldak = BLKLDD( descA, k );

        return gpu_zgemm(context, this_task,
                         ( ((1+k) == n) && !(descA.nt>=(k+3)) ),
                         PlasmaNoTrans, PlasmaNoTrans,
                         descA.mb, tempnn, tempkm,
                         1.0, m, k, &descA, ldam,
                              k, n, &descA, ldak,
                         1.0, m, n, &descA, ldam );
END
*********************/

BODY
{
  int tempnn = ((n)==(descA.nt-1)) ? (descA.n-(n*descA.nb)) : descA.nb;
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int ldam = BLKLDD( descA, m );
  int ldak = BLKLDD( descA, k );

  printlog("CORE_zgemm(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaNoTrans, descA.mb, tempnn, tempkm, 1.000000, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
  k, m, n, m, k, A, k, n, B, m, n, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
             descA.mb, tempnn, tempkm,
             1.000000, A /* dataA(m,k) */, ldam,
                       B /* dataA(k,n) */, ldak,
             1.000000, C /* dataA(m,n) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

trtri_ztrsmR(k, m)
  /* Execution Space */
  k = (1)..(descA.mt-1)
  m = 0..(k-1)

  /* Locality */
  : dataA(m,k)

  CTL   ctl7 -> ctl7 trtri_ztrtri(k)
  READ  A    <- A potrf_zpotrf(k)
  RW    B    <- ((k>=(m+2))) ? C trtri_zgemm(k-1, m, k)
             <- ((k==(m+1))) ? B trtri_ztrsmL(m+1-1, m+1)
             -> ((m>=1)) ? B lauum_zgemm(k, 0..(m-1), m)
             -> ((k>=(2+m))) ? A lauum_zgemm(k, m, (m+1)..(k-1))
             -> A lauum_zherk(k, m)
             -> B lauum_ztrmm(k, m)
  CTL   ctl6 <- ((k==(m+1)) & (k>=2)) ? ctl6 trtri_zgemm(k-1, 0..(m+1-2), m+1)
  CTL   ctl4 <- ((descA.nt>=(k+2))) ? ctl4 trtri_zgemm(k, m, (k+1)..(descA.nt-1))

BODY
{
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );

  printlog("CORE_ztrsmR(%d, %d)\n"
           "\t(PlasmaRight, uplo, PlasmaNoTrans, PlasmaNonUnit, descA.mb, tempkm, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
  k, m, k, k, A, m, k, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_ztrsm(PlasmaRight, uplo, PlasmaNoTrans,
        PlasmaNonUnit, descA.mb, tempkm,
        1.000000, A /* dataA(k,k) */, ldak,
        B /* dataA(m,k) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

trtri_ztrtri(k)
  /* Execution Space */
  k = 0..(descA.mt-1)

  /* Locality */
  : dataA(k,k)

  RW    A    <- A potrf_zpotrf(k)
             -> A lauum_zlauum(k)
             -> ((k>=1)) ? A lauum_ztrmm(k, 0..(k-1))
  CTL   ctl7 <- ((k>=1)) ? ctl7 trtri_ztrsmR(k, 0..(k-1))
  CTL   ctl3 <- ((0==k) & (descA.nt>=2)) ? ctl3 trtri_ztrsmL(0, (1)..(descA.nt-1))

BODY
{
  int tempkm = ((k)==(descA.mt-1)) ? (descA.m-(k*descA.mb)) : descA.mb;
  int ldak = BLKLDD( descA, k );
  int info = 0;

  printlog("CORE_ztrtri(%d)\n"
           "\t(uplo, PlasmaNonUnit, tempkm, A(%d,%d)[%p], ldak, descA.mb*k)\n",
  k, k, k, A);
#if !defined(DAGUE_DRY_RUN)

  CORE_ztrtri(uplo, PlasmaNonUnit, tempkm,
              A /* dataA(k,k) */, ldak, &info );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

lauum_zherk(k, m)
  /* Execution Space */
  k = (1)..(descA.mt-1)
  m = 0..(k-1)

  /* Locality */
  : dataA(m,m)

  CTL   ctl8 -> ctl8 lauum_ztrmm(k, m)
  READ  A    <- B trtri_ztrsmR(k, m)
  RW    B    <- (((m+1)==k)) ? A lauum_zlauum(k-1)
             <- ((k>=(2+m))) ? B lauum_zherk(k-1, m)
             -> (descA.nt==(1+k)) ? A DAGUE_OUT_A(m, m)
             -> (descA.mt>=(k+2)) ? B lauum_zherk(k+1, m)
             -> (descB.nt==(1+k)) ? A hemm_zhemm(0..(descB.mt-1), m)

BODY
{
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldam = BLKLDD( descA, m );

  printlog("CORE_zherk(%d, %d)\n"
           "\t(uplo, PlasmaNoTrans, descA.mb, tempkn, 1.000000, A(%d,%d)[%p], ldam, 1.000000, A(%d,%d)[%p], ldam)\n",
  k, m, m, k, A, m, m, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_zherk(uplo, PlasmaNoTrans, descA.mb,
        tempkn, 1.000000, A /* dataA(m,k) */,
        ldam, 1.000000, B /* dataA(m,m) */,
        ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

lauum_zgemm(k, m, n)
  /* Execution Space */
  k = (1)..(descA.mt-1)
  m = 0..(k-2)
  n = (m+1)..(k-1)

  /* Locality */
  : dataA(m,n)

  READ  A    <- B trtri_ztrsmR(k, m)
  READ  B    <- B trtri_ztrsmR(k, n)
  RW    C    <- ((k==(n+1))) ? B lauum_ztrmm(n, m)
             <- ((k>=(2+n))) ? C lauum_zgemm(k-1, m, n)
             -> (descC.nt==(k+1)) ? B hemm_zgemmNN(0..(descB.mt-1), n, m)
             -> (descA.mt>=(k+2)) ? C lauum_zgemm(k+1, m, n)
             -> (descA.mt==(1+k)) ? A DAGUE_OUT_A(m, n)
             -> (descA.mt==(1+k)) ? B hemm_zgemmNC(0..(descB.mt-1), m, n)
  CTL   ctl10 -> ctl10 lauum_ztrmm(k, n)
  CTL   ctl9 -> ctl9 lauum_ztrmm(k, m)

BODY [type=CUDA dyld=cublasZgemm]
        int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
        int ldam = BLKLDD( descA, m );
        int ldan = BLKLDD( descA, n );

        /* I don't know what happens if "descA.mt != descC.nt" */
        return gpu_zgemm(context, this_task,
                         ( descA.mt == k+1 ),
                         PlasmaNoTrans, PlasmaConjTrans,
                         descA.mb, descA.nb, tempkn,
                         1.0, m, k, &descA, ldam,
                              n, k, &descA, ldan,
                         1.0, m, n, &descA, ldam );
END

BODY
{
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldam = BLKLDD( descA, m );
  int ldan = BLKLDD( descA, n );

  printlog("CORE_zgemm(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaConjTrans, descA.mb, descA.nb, tempkn, 1.000000, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldan, 1.000000, A(%d,%d)[%p], ldam)\n",
  k, m, n, m, k, A, n, k, B, m, n, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zgemm(PlasmaNoTrans, PlasmaConjTrans, 
             descA.mb, descA.nb, tempkn,
             1.000000, A /* dataA(m,k) */, ldam,
                       B /* dataA(n,k) */, ldan,
             1.000000, C /* dataA(m,n) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

lauum_ztrmm(k, m)
  /* Execution Space */
  k = (1)..(descA.mt-1)
  m = 0..(k-1)

  /* Locality */
  : dataA(m,k)

  CTL   ctl11 -> ctl11 lauum_zlauum(k)
  READ  A    <- A trtri_ztrtri(k)
  RW    B    <- B trtri_ztrsmR(k, m)
             -> (descA.nt==(k+1)) ? B hemm_zgemmNC(0..(descB.mt-1), m, k)
             -> (descC.nt==(1+k)) ? B hemm_zgemmNN(0..(descB.mt-1), k, m)
             -> (descA.mt==(1+k)) ? A DAGUE_OUT_A(m, k)
             -> (descA.mt>=(2+k)) ? C lauum_zgemm(k+1, m, k)
  CTL   ctl10 <- (m>=1)     ? ctl10 lauum_zgemm(k, 0..(m-1), m)
  CTL   ctl9  <- (k>=(2+m)) ? ctl9  lauum_zgemm(k, m, (m+1)..(k-1))
  CTL   ctl8  <- ctl8 lauum_zherk(k, m)

BODY
{
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );
  int ldam = BLKLDD( descA, m );

  printlog("CORE_ztrmm(%d, %d)\n"
           "\t(PlasmaRight, uplo, PlasmaConjTrans, PlasmaNonUnit, descA.mb, tempkn, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
  k, m, k, k, A, m, k, B);
#if !defined(DAGUE_DRY_RUN)

  CORE_ztrmm(PlasmaRight, uplo, PlasmaConjTrans,
        PlasmaNonUnit, descA.mb, tempkn,
        1.000000, A /* dataA(k,k) */, ldak,
        B /* dataA(m,k) */, ldam );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

lauum_zlauum(k)
  /* Execution Space */
  k = 0..(descA.mt-1)

  /* Locality */
  : dataA(k,k)

  RW    A    <- A trtri_ztrtri(k)
             -> (descA.mt>=(2+k)) ? B lauum_zherk(k+1, k)
             -> (descA.nt==(1+k)) ? A DAGUE_OUT_A(k, k)
             -> (descB.nt==(k+1)) ? A hemm_zhemm(0..(descB.mt-1), k)
  CTL   ctl11 <- ((k>=1)) ? ctl11 lauum_ztrmm(k, 0..(k-1))

BODY
{
  int tempkn = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
  int ldak = BLKLDD( descA, k );

  printlog("CORE_zlauum(%d)\n"
           "\t(uplo, tempkn, A(%d,%d)[%p], ldak)\n",
  k, k, k, A);
#if !defined(DAGUE_DRY_RUN)

  CORE_zlauum(uplo, tempkn, A /* dataA(k,k) */,
        ldak );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END


DAGUE_IN_B(m, n)
  /* Execution Space */
  m = 0..(descB.mt-1)
  n = 0..(descB.nt-1)

  /* Locality */
  : dataB(m,n)

  /*
     Add control edges so they don't all run at the beginning,
     when they are only needed at the end
  */
  CTL   ctl0 <- (0 < n)               ? ctl0 DAGUE_IN_B(m, n-1)
             <- ((0 == n) && (0 < m)) ? ctl0 DAGUE_IN_B(m-1, descB.nt-1)
             -> (n < descB.nt-1)                        ? ctl0 DAGUE_IN_B(m, n+1)
             -> ((n == descB.nt-1) && (m < descB.mt-1)) ? ctl0 DAGUE_IN_B(m+1, 0)
             
  RW    A    <- dataB(m,n)
             -> ((descB.nt>=(2+n))) ? A hemm_zgemmNN(m, (n+1)..(descB.nt-1), n)
             -> B hemm_zhemm(m, n)
             -> ((n>=1)) ? A hemm_zgemmNC(m, 0..(n-1), n)

BODY
{
    /* nothing */
}
END

hemm_zgemmNN(m, n, k)
  /* Execution Space */
  m = 0..(descC.mt-1)
  n = (1)..(descC.nt-1)
  k = 0..(n-1)

  /* Locality */
  : dataC(m,n)

  READ  A    <- A DAGUE_IN_B(m, k)
  READ  B    <- (descA.mt==(n+1)) ? B lauum_ztrmm(descB.nt-1, k)
             <- (descB.nt>=(2+n)) ? C lauum_zgemm(descA.mt-1, k, n)
  RW    C    <- (k == 0) ? dataC(m, n)
             <- ((k>=1)) ? C hemm_zgemmNN(m, n, k-1)
             -> ((n==(1+k))) ? C hemm_zhemm(m, k+1)
             -> ((n>=(k+2))) ? C hemm_zgemmNN(m, n, k+1)

BODY [type=CUDA dyld=cublasZgemm]
        int tempmm = ((m)==(descC.mt-1)) ? (descC.m-(m*descC.mb)) : descC.mb;
        int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
        int ldbm = BLKLDD( descB, m );
        int ldak = BLKLDD( descA, k );
        dague_complex64_t zbeta = ((k)==(0)) ? (beta) : (1.000000);
        int ldcm = BLKLDD( descC, m );

        return gpu_zgemm(context, this_task,
                         ( n == k+1 ),
                         PlasmaNoTrans, PlasmaNoTrans,
                         tempmm, tempnn, descC.nb,
                         alpha, m, k, &descB, ldbm,
                                k, n, &descA, ldak,
                         zbeta, m, n, &descC, ldcm );
END

BODY
{
  int tempmm = ((m)==(descC.mt-1)) ? (descC.m-(m*descC.mb)) : descC.mb;
  int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
  int ldbm = BLKLDD( descB, m );
  int ldak = BLKLDD( descA, k );
  dague_complex64_t zbeta = ((k)==(0)) ? (beta) : (1.000000);
  int ldcm = BLKLDD( descC, m );

  printlog("CORE_zgemmNN(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaNoTrans, tempmm, tempnn, descC.nb, alpha, B(%d,%d)[%p], ldbm, A(%d,%d)[%p], ldak, zbeta, C(%d,%d)[%p], ldcm)\n",
  m, n, k, m, k, A, k, n, B, m, n, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
             tempmm, tempnn, descC.nb,
             alpha, A /* dataB(m,k) */, ldbm,
                    B /* dataA(k,n) */, ldak,
             zbeta, C /* dataC(m,n) */, ldcm );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

hemm_zhemm(m, n)
  /* Execution Space */
  m = 0..(descC.mt-1)
  n = 0..(descC.nt-1)

  /* Locality */
  : dataC(m,n)

  READ  A    <- (((n+1)==descA.nt)) ? A lauum_zlauum(descA.nt-1)
             <- ((descA.mt>=(n+2))) ? B lauum_zherk(descB.nt-1, n)
  READ  B    <- A DAGUE_IN_B(m, n)
  RW    C    <- (n == 0) ? dataC(m, n)
             <- (n >= 1) ? C hemm_zgemmNN(m, n-1+1, n-1)
             -> (descA.nt==(n+1)) ? dataC(m, n)
             -> (descC.nt>=(n+2)) ? C hemm_zgemmNC(m, n, n+1)

BODY
{
  int tempmm = ((m)==(descC.mt-1)) ? (descC.m-(m*descC.mb)) : descC.mb;
  int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
  int ldan = BLKLDD( descA, n );
  int ldbm = BLKLDD( descB, m );
  int ldcm = BLKLDD( descC, m );
  dague_complex64_t zbeta = ((n)==(0)) ? (beta) : (1.000000);

  printlog("CORE_zhemm(%d, %d)\n"
           "\t(side, uplo, tempmm, tempnn, alpha, A(%d,%d)[%p], ldan, B(%d,%d)[%p], ldbm, zbeta, C(%d,%d)[%p], ldcm)\n",
  m, n, n, n, A, m, n, B, m, n, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zhemm(PlasmaRight, uplo, tempmm,
        tempnn, alpha, A /* dataA(n,n) */,
        ldan, B /* dataB(m,n) */, ldbm,
        zbeta, C /* dataC(m,n) */, ldcm );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

hemm_zgemmNC(m, n, k)
  /* Execution Space */
  m = 0..(descC.mt-1)
  n = 0..(descC.nt-2)
  k = (n+1)..(descC.nt-1)

  /* Locality */
  : dataC(m,n)

  READ  A    <- A DAGUE_IN_B(m, k)
  READ  B    <- ((descC.nt>=(k+2))) ? C lauum_zgemm(descA.nt-1, n, k)
             <- (((1+k)==descA.nt)) ? B lauum_ztrmm(descA.nt-1, n)
  RW    C    <- ((k>=(2+n))) ? C hemm_zgemmNC(m, n, k-1)
             <- ((k==(1+n))) ? C hemm_zhemm(m, k-1)
             -> (descC.nt>=(k+2)) ? C hemm_zgemmNC(m, n, k+1)
             -> (descB.nt==(k+1)) ? dataC(m, n)

BODY [type=CUDA dyld=cublasZgemm]
        int tempmm = ((m)==(descC.mt-1)) ? (descC.m-(m*descC.mb)) : descC.mb;
        int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
        int tempkn = ((k)==(descC.nt-1)) ? (descC.n-(k*descC.nb)) : descC.nb;
        int ldbm = BLKLDD( descB, m );
        int ldan = BLKLDD( descA, n );
        dague_complex64_t zbeta = 1.000000;
        int ldcm = BLKLDD( descC, m );

        return gpu_zgemm(context, this_task,
                         ( descB.nt == k+1 ),
                         PlasmaNoTrans, PlasmaConjTrans,
                         tempmm, tempnn, tempkn,
                         alpha, m, k, &descB, ldbm,
                                n, k, &descA, ldan,
                         zbeta, m, n, &descC, ldcm );
END

BODY
{
  int tempmm = ((m)==(descC.mt-1)) ? (descC.m-(m*descC.mb)) : descC.mb;
  int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
  int tempkn = ((k)==(descC.nt-1)) ? (descC.n-(k*descC.nb)) : descC.nb;
  int ldbm = BLKLDD( descB, m );
  int ldan = BLKLDD( descA, n );
  dague_complex64_t zbeta = 1.000000;
  int ldcm = BLKLDD( descC, m );

  printlog("CORE_zgemmNC(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaConjTrans, tempmm, tempnn, tempkn, alpha, B(%d,%d)[%p], ldbm, A(%d,%d)[%p], ldan, zbeta, C(%d,%d)[%p], ldcm)\n",
  m, n, k, m, k, A, n, k, B, m, n, C);
#if !defined(DAGUE_DRY_RUN)

  CORE_zgemm(PlasmaNoTrans, PlasmaConjTrans,
             tempmm, tempnn, tempkn,
             alpha, A /* dataB(m,k) */, ldbm,
                    B /* dataA(n,k) */, ldan,
             zbeta, C /* dataC(m,n) */, ldcm );
#endif  /* !defined(DAGUE_DRY_RUN) */

}
END

DAGUE_OUT_A(m, n)
  /* Execution Space */
  m = 0 .. (descA.nt-1)
  n = m .. (descA.nt-1)

  /* Locality */
  : dataA(m,n)

  RW    A    <- ((n>=(m+1)) & (descA.mt>=(n+2))) ? C lauum_zgemm(descA.mt-1, m, n)
             <- ((descA.nt==(n+1)) & (descA.nt>=(m+2))) ? B lauum_ztrmm(descB.nt-1, m)
             <- ((m==n) & (descA.nt>=(m+2))) ? B lauum_zherk(descA.mt-1, m)
             <- (((1+m)==descA.nt) & (m==n)) ? A lauum_zlauum(descA.mt-1)
             -> dataA(m,n)

BODY
{
    /* nothing */
}
END
