extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include <lapacke.h>
#include "dplasma/lib/dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

side   [type = "PLASMA_enum"]
trans  [type = "PLASMA_enum"]
dataA  [type = "dague_ddesc_t *"]
dataC  [type = "dague_ddesc_t *"]
dataT  [type = "dague_ddesc_t *" aligned=dataA]
p_work [type = "dague_memory_pool_t *" size = "(sizeof(dague_complex64_t)*descT.nb*descT.nb)"]

descA  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataA)"]
descC  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataC)"]
descT  [type = "tiled_matrix_desc_t" hidden = on default = "*((tiled_matrix_desc_t*)dataT)"]


zlarfb(k, n)
  /* Execution space */
  k = 0 .. descA.nt-1
  n = 0 .. descC.nt-1

  : dataC(0,n)

  READ  V <- A read_A(k)
  READ  T <- T read_T(k)                                 [type = LITTLE_T]
  RW    C <- (k == 0) ? dataC(0, n) : C zlarfb(k-1, n)
          -> (k == descA.nt-1) ? dataC(0, n)
          -> (k <  descA.nt-1) ? C zlarfb(k+1, n)

BODY
{
    dague_complex64_t *lV = (dague_complex64_t*)V;
    dague_complex64_t *lC = (dague_complex64_t*)C;
    int tempm = descC.m - k * descC.nb;
    int tempnn = ((n)==(descC.nt-1)) ? (descC.n-(n*descC.nb)) : descC.nb;
    int tempkk = ((k)==(descA.nt-1)) ? (descA.n-(k*descA.nb)) : descA.nb;
    int ldak = BLKLDD( descA, k );
    int ldck = BLKLDD( descC, k );

    printlog("CORE_zlarfb(%d, %d)\n", k, n);

#if !defined(DAGUE_DRY_RUN)
    void *p_elem_W = dague_private_memory_pop( p_work );

    LAPACKE_zlarfb_work(
        LAPACK_COL_MAJOR,
        lapack_const(PlasmaLeft),
        lapack_const(PlasmaConjTrans),
        lapack_const(PlasmaForward),
        lapack_const(PlasmaColumnwise),
        tempm, tempnn, tempkk,
        lV + k * descA.nb, ldak,
        T,                 descT.mb,
        lC + k * descA.nb, ldck,
        p_elem_W, descA.nb);

    dague_private_memory_push( p_work, p_elem_W );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END

read_A(k) [profile = off]
  k = 0 .. descA.nt-1

  : dataA(0, k)

  RW A <- dataA(0, k) 
       -> V zlarfb(k, 0 .. descC.nt-1)             
BODY
{
    /* nothing */
}
END

read_T(k) [profile = off]
  k = 0 .. descT.nt-1

  : dataT(0, k)

  RW T <- dataT(0, k)                        [type = LITTLE_T]
       -> T zlarfb(k, 0 .. descC.nt-1)       [type = LITTLE_T]          
BODY
{
    /* nothing */
}
END
