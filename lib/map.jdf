extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

/*
 * Globals
 */
uplo     [type = PLASMA_enum]
descA    [type = "tiled_matrix_desc_t*"]
operator [type = "tiled_matrix_unary_op_t" ]
op_args  [type = "void *" ]

plasma_upper [type="PLASMA_enum" hidden=on default=PlasmaUpper ]
plasma_lower [type="PLASMA_enum" hidden=on default=PlasmaLower ]

MAP_L(m, n)  [profile = off]
  // Execution space
  m = 1 .. ((uplo == plasma_upper) ? 0 : descA->mt-1)
  n = 0 .. ( m < descA->nt ? m-1 : descA->nt-1 )

  // Parallel partitioning
  : descA(m, n)

  // Parameters
  RW    A <- descA(m, n)
          -> descA(m, n)

BODY
{
#if !defined(PARSEC_DRY_RUN)
    operator( context, descA, A,
              PlasmaUpperLower, m, n, op_args );
#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("thread %d VP %d map_l( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, m, n );
}
END

MAP_U(m, n)  [profile = off]
  // Execution space
  m = 0   .. descA->mt-1
  n = m+1 .. ((uplo == plasma_lower) ? 0 : descA->nt-1)

  // Parallel partitioning
  : descA(m, n)

  // Parameters
  RW    A <- descA(m, n)
          -> descA(m, n)

BODY
{
#if !defined(PARSEC_DRY_RUN)
    operator( context, descA, A,
              PlasmaUpperLower, m, n, op_args );
#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("thread %d VP %d map_u( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, m, n );
}
END

MAP_DIAG(k) [profile = off]
  // Execution space
  k = 0 .. ( descA->mt < descA->nt ? descA->mt-1 : descA->nt-1 )

  // Parallel partitioning
  : descA(k, k)

  // Parameters
  RW    A <- descA(k, k)
          -> descA(k, k)

BODY
{
#if !defined(PARSEC_DRY_RUN)
    operator( context, descA, A,
              uplo, k, k, op_args );
#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("thread %d VP %d map_diag( %d, %d )\n",
             context->th_id, context->virtual_process->vp_id, k, k );
}
END
