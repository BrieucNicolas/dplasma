extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "data_dist/matrix/matrix.h"

%}

mA     [type = "tiled_matrix_desc_t*"]
mT     [type = "tiled_matrix_desc_t*" aligned=mA]
ib     [type = "int"]
p_work [type = "dague_memory_pool_t *" size = "(sizeof(dague_complex64_t)*ib*mT->nb)"]
p_tau  [type = "dague_memory_pool_t *" size = "(sizeof(dague_complex64_t)   *mT->nb)"]


zgelqt_typechange(k)  [profile = off]
  /* Execution space */
  k = 0 .. %{ return dplasma_imin((mA->nt-1),(mA->mt-1)); %}

  : mA(k,k)

RW A <- A zgelqt(k)
     -> (k < (mA->mt-1)) ? A zunmlq(k, (k+1)..(mA->mt-1)) [type = UPPER_TILE]
     -> mA(k, k)                                              [type = UPPER_TILE]

BODY
{
    /* Nothing */
}
END

zgelqt(k)
  /* Execution space */
  k = 0 .. %{ return dplasma_imin((mA->nt-1),(mA->mt-1)); %}

  : mA(k,k)

  RW    A <- (0 == k) ? mA(k, k) : A2 ztsmlq(k-1, k, k)
          -> (mA->nt==(k+1)) ? mA(k,k)                         [type = LOWER_TILE]
          -> (mA->nt>=(k+2)) ? A1 ztslqt(k, k+1)               [type = LOWER_TILE]
          -> A zgelqt_typechange(k)

  RW    T <- mT(k, k)                                            [type = LITTLE_T]
          -> mT(k, k)                                            [type = LITTLE_T]
          -> (mA->mt-1 > k) ? T zunmlq(k, (k+1)..(mA->mt-1)) [type = LITTLE_T]

  /* Priority */
  ;(mA->mt-k)*(mA->mt-k)*(mA->mt-k)

BODY
{
    int tempkm = ((k)==(mA->mt-1)) ? (mA->m-(k*mA->mb)) : mA->mb;
    int tempkn = ((k)==(mA->nt-1)) ? (mA->n-(k*mA->nb)) : mA->nb;
    int ldak = BLKLDDP( mA, k );

    printlog("CORE_zgeqrt(%d)\n"
             "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], mT->mb, p_elem_A, p_elem_B)\n",
             k, k, k, A, k, k, T);

#if !defined(DAGUE_DRY_RUN)

    void *p_elem_A = dague_private_memory_pop( p_tau );
    void *p_elem_B = dague_private_memory_pop( p_work );

    CORE_zgelqt(tempkm, tempkn, ib,
                A /* mA(k,k) */, ldak,
                T /* mT(k,k) */, mT->mb,
                p_elem_A, p_elem_B );

    dague_private_memory_push( p_tau,  p_elem_A );
    dague_private_memory_push( p_work, p_elem_B );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END


zunmlq(k,m)
  /* Execution space */
  k = 0   .. %{ return dplasma_imin((mA->nt-1),(mA->mt-2)); %}
  m = k+1 .. mA->mt-1

  : mA(m,k)

  READ  A <- A zgelqt_typechange(k)                       [type = UPPER_TILE]
  READ  T <- T zgelqt(k)                                  [type = LITTLE_T]
  RW    C <- (k == 0) ? mA(m, k) : A2 ztsmlq(k-1, k, m)
          -> (k == (mA->nt-1)) ? mA(m, k)
          -> (k <  (mA->nt-1)) ? A1 ztsmlq(k, k+1, m)

BODY
{
    int tempmm = ((m)==(mA->mt-1)) ? (mA->m-(m*mA->mb)) : mA->mb;
    int tempkn = ((k)==(mA->nt-1)) ? (mA->n-(k*mA->nb)) : mA->nb;
    int ldak = BLKLDDP( mA, k );
    int ldam = BLKLDDP( mA, m );

    printlog("CORE_zunmlq(%d, %d)\n"
             "\t(PlasmaRight, PlasmaConjTrans, tempmm, tempkn, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], mT->mb, A(%d,%d)[%p], ldam, p_elem_A, mT->nb)\n",
             k, m, k, k, A, k, k, T, m, k, C);

#if !defined(DAGUE_DRY_RUN)

    void *p_elem_A = dague_private_memory_pop( p_work );

    CORE_zunmlq(PlasmaRight, PlasmaConjTrans,
                tempmm, tempkn, tempkn, ib,
                A /* mA(k,k) */, ldak,
                T /* mT(k,k) */, mT->mb,
                C /* mA(m,k) */, ldam,
                p_elem_A, mT->nb );

    dague_private_memory_push( p_work, p_elem_A );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END


ztslqt_out_A0(k) [profile = off]
  k = 0..( (mA->nt <= mA->mt) ? mA->nt-2 : mA->mt-1 )

  : mA(k, k)

  RW A1 <- A1 ztslqt(k, mA->nt-1) [type = LOWER_TILE]
        -> mA(k, k)                 [type = LOWER_TILE]
BODY
{
    /* nothing */
}
END

ztslqt(k,n)
  /* Execution space */
  k = 0   .. %{ return dplasma_imin((mA->nt-2),(mA->mt-1)); %}
  n = k+1 .. mA->nt-1

  : mA(k, n)

  RW   A1 <- ( n == (k+1)       ) ? A zgelqt(n-1) : A1 ztslqt(k, n-1)       [type = LOWER_TILE]
          -> ( n == (mA->nt-1)) ? A1 ztslqt_out_A0(k) : A1 ztslqt(k, n+1) [type = LOWER_TILE]

  RW   A2 <- (k == 0) ? mA(k, n) : A2 ztsmlq(k-1, n, k)
          -> mA(k, n)
          -> (k < (mA->mt-1)) ? V ztsmlq(k, n, (k+1)..(mA->mt-1))

  RW   T  <- mT(k, n)                                                       [type = LITTLE_T]
          -> mT(k, n)                                                       [type = LITTLE_T]
          -> (k < (mA->mt-1)) ? T ztsmlq(k, n, (k+1)..(mA->mt-1))       [type = LITTLE_T]

    /* Priority */
; (mA->nt-k)*(mA->nt-k)*(mA->nt-k)

BODY
{
    int tempkm = ((k)==(mA->mt-1)) ? (mA->m-(k*mA->mb)) : mA->mb;
    int tempnn = ((n)==(mA->nt-1)) ? (mA->n-(n*mA->nb)) : mA->nb;
    int ldak = BLKLDDP( mA, k );

    printlog("CORE_ztslqt(%d, %d)\n"
             "\t(tempkm, tempnn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, T(%d,%d)[%p], mT->mb, p_elem_A, p_elem_B)\n",
             k, n, k, k, T, k, n, A1, k, n, A2);

#if !defined(DAGUE_DRY_RUN)

    void *p_elem_A = dague_private_memory_pop( p_tau );
    void *p_elem_B = dague_private_memory_pop( p_work );

    CORE_ztslqt(tempkm, tempnn, ib,
                A1 /* mA(k,k) */, ldak,
                A2 /* mA(k,n) */, ldak,
                T  /* mT(k,n) */, mT->mb,
                p_elem_A, p_elem_B );

    dague_private_memory_push( p_tau,  p_elem_A );
    dague_private_memory_push( p_work, p_elem_B );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END


ztsmlq_out_A1(k, m) [profile = off]
  k = 0   .. %{ return dplasma_imin((mA->nt-2),(mA->mt-2)); %}
  m = k+1 .. mA->mt-1

  : mA(m, k)

  RW A1 <- A1 ztsmlq(k, mA->nt-1, m)
        -> mA(m, k)
BODY
{
    /* nothing */
}
END


ztsmlq(k,n,m)
  /* Execution space */
  k = 0     .. %{ return dplasma_imin((mA->mt-2),(mA->nt-2)); %}
  n = (k+1) .. (mA->nt-1)
  m = (k+1) .. (mA->mt-1)

  : mA(m, n)

  RW   A1 <- ( (k+1) == n ) ? C zunmlq(k, m) : A1 ztsmlq(k, n-1, m)
          -> ( n == (mA->nt-1) ) ? A1 ztsmlq_out_A1(k, m) : A1 ztsmlq(k, n+1, m)

  RW   A2 <- (0==k) ? mA(m, n) : A2 ztsmlq(k-1, n, m)
          -> (((k+1) == n) & ((k+1) == m)) ? A  zgelqt(m)            /* Diagonal */
          -> (((k+1) == m) & (    n > m )) ? A2 ztslqt(m, n)         /* Next column */
          -> (((k+1) == n) & (    m > n )) ? C  zunmlq(k+1, m)       /* Next row */
          -> (((k+1) <  n) & ((1+k) < m )) ? A2 ztsmlq(k+1, n, m)    /* trailing submatrix */

  READ V  <- A2 ztslqt(k, n)
  READ T  <- T  ztslqt(k, n)   [type = LITTLE_T]

    /* Priority */
; (mA->nt-k)*(mA->nt-m)*(mA->nt-m)

BODY
{
    int tempmm = ((m)==(mA->mt-1)) ? (mA->m-(m*mA->mb)) : mA->mb;
    int tempnn = ((n)==(mA->nt-1)) ? (mA->n-(n*mA->nb)) : mA->nb;
    int ldak = BLKLDDP( mA, k );
    int ldam = BLKLDDP( mA, m );

    printlog("CORE_ztsmlq(%d, %d, %d)\n"
             "\t(PlasmaRight, PlasmaConjTrans, tempmm, mA->nb, tempmm, tempnn, mA->mb, ib, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, T(%d,%d)[%p], mT->mb, p_elem_A, ldwork)\n",
             k, n, m, m, k, A1, m, n, A2, k, n, V, k, n, T);

#if !defined(DAGUE_DRY_RUN)
    void *p_elem_A = dague_private_memory_pop( p_work );

    CORE_ztsmlq(PlasmaRight, PlasmaConjTrans,
                tempmm, mA->nb, tempmm, tempnn, mA->mb, ib,
                A1 /* mA(m,k) */, ldam,
                A2 /* mA(m,n) */, ldam,
                V  /* mA(k,n) */, ldak,
                T  /* mT(k,n) */, mT->mb,
                p_elem_A, mT->nb );

    dague_private_memory_push( p_work, p_elem_A );

#endif  /* !defined(DAGUE_DRY_RUN) */
}
END
